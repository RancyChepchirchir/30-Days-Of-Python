#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Mar  6 08:33:04 2021

@author: rancy
"""

# =============================================================================
# ## Functions

# ## So far we have seen many built-in python functions. In this section, we will focus on custom functions. What is a function? Before we start making functions, lets learn what a function is and why we need them?
# =============================================================================

### Defining a Function ; A function is a reusable block of code or programming statements designed to perform a certain task. To define a function, Python provides the _def_ keyword. The following is the syntax for defining a function. The function block of code is executed only if we call it.

### Declaring and Calling a Function ; When we make a function we call it declaring a function. When we start using the it we call it calling or invoking a function. Function can be declared with or without parameters.

'''
# Declaring a function
def function_name():
    codes
    codes
# Calling a function
function_name()
'''

### Function without Parameters ; Function can be declared without parameters.

def generate_full_name ():
    first_name = 'Rancy'
    last_name = 'Chepchirchir'
    space = ' '
    full_name = first_name + space + last_name
    print(full_name)
generate_full_name () # calling a function

def add_two_numbers ():
    num_one = 2
    num_two = 3
    total = num_one + num_two
    print(total)
add_two_numbers()


### Function Returning a Value - Part 1 

# Function can also return values, if a function does not return any, the value of the function is None. Lets rewrite the above functions using return. From now on, we get a value when calling the function, instead of printing it.

def generate_full_name ():
    first_name = 'Rancy'
    last_name = 'Chepchirchir'
    space = ' '
    full_name = first_name + space + last_name
    return full_name
print(generate_full_name())

def add_two_numbers ():
    num_one = 2
    num_two = 3
    total = num_one + num_two
    return total
print(add_two_numbers())


### Function with Parameters

# In a function we can pass different data types(number, string, boolean, list, tuple, dictionary or set) as a parameter

# - Single Parameter: If our function takes a parameter we should call our function with an argument

'''
  # Declaring a function
  def function_name(parameter):
    codes
    codes
  # Calling function
  function_name(parameter)
'''

def greetings(name):
    message = name + ', welcome to Python for Everyone!'
    return message

print(greetings('Rancy'))

def add_ten(num):
    ten = 10
    return num + ten
print(add_ten(90))

def square_number(x):
    return x * x
print(square_number(2))

def area_of_circle(r):
    PI = 3.14
    area = PI * r ** 2
    return area
print(area_of_circle(10))

def sum_of_numbers(n):
    total = 0
    for i in range(n+1):
        total+=i
    print(total)
sum_of_numbers(10) # 55
sum_of_numbers(100) # 5050  

# - Two Parameter: A function may or may not have a parameter or parameters. A function may have two or more parameters. If our function takes parameters we should call it with arguments. Let's check a function with two parameters:

'''
  # Declaring a function
  def function_name(para1, para2):
    codes
    codes
  # Calling function
  function_name(arg1, arg2)
'''

def generate_full_name (first_name, last_name):
    space = ' '
    full_name = first_name + space + last_name
    return full_name
print('Full Name: ', generate_full_name('Rancy','Chepchirchir'))

def sum_two_numbers (num_one, num_two):
    sum = num_one + num_two
    return sum
print('Sum of two numbers: ', sum_two_numbers(1, 9))

def calculate_age (current_year, birth_year):
    age = current_year - birth_year
    return age;

print('Age: ', calculate_age(2019, 1819))

def weight_of_object (mass, gravity):
    weight = str(mass * gravity)+ ' N' # the value has to be changed to a string first
    return weight
print('Weight of an object in Newtons: ', weight_of_object(100, 9.81))  



### Passing Arguments with Key and Value

# If we pass the arguments with key and value, the order of the arguments does not matter.    

'''
# Declaring a function
def function_name(para1, para2):
    codes
    codes
# Calling function
function_name(para1='John', para2='Doe') # the order of arguments does not matter here
'''

def print_fullname(firstname, lastname):
    space = ' '
    full_name = firstname  + space + lastname
    print(full_name)
print_fullname(firstname='Rancy', lastname='Chepchirchir')

def add_two_numbers (num1, num2):
    total = num1 + num2
    print(total)
add_two_numbers(num2=3, num1=2) # Order does not matter


### Function Returning a Value - Part 2

# If we do not return a value with a function, then our function is returning _None_ by default. To return a value with a function we use the keyword _return_ followed by the variable we are returning. We can return any kind of data types from a function.

# - Returning a string:

def print_name(firstname):
    return firstname
print_name('Rancy') # Rancy

def print_full_name(firstname, lastname):
    space = ' '
    full_name = firstname  + space + lastname
    return full_name
print_full_name(firstname='Rancy', lastname='Chepchirchir')

# - Returning a number:

def add_two_numbers (num1, num2):
    total = num1 + num2
    return total
print(add_two_numbers(2, 3))

def calculate_age (current_year, birth_year):
    age = current_year - birth_year
    return age;
print('Age: ', calculate_age(2019, 1819))

# - Returning a boolean:

def is_even (n):
    if n % 2 == 0:
        print('even')
        return True    # return stops further execution of the function, similar to break 
    return False
print(is_even(10)) # True
print(is_even(7)) # False

# - Returning a list:

def find_even_numbers(n):
    evens = []
    for i in range(n+1):
        if i % 2 == 0:
            evens.append(i)
    return evens
print(find_even_numbers(10))


### Function with Default Parameters

# Sometimes we pass default values to parameters, when we invoke the function. If we do not pass arguments when calling the function, their default values will be used.

'''
# Declaring a function
def function_name(param = value):
    codes
    codes
# Calling function
function_name()
function_name(arg)
'''

def greetings (name = 'Peter'):
    message = name + ', welcome to Python for Everyone!'
    return message
print(greetings())
print(greetings('Asabeneh'))

def generate_full_name (first_name = 'Rancy', last_name = 'Chepchirchir'):
    space = ' '
    full_name = first_name + space + last_name
    return full_name

print(generate_full_name())
print(generate_full_name('David','Smith'))

def calculate_age (birth_year,current_year = 2019):
    age = current_year - birth_year
    return age;
print('Age: ', calculate_age(1819))

def weight_of_object (mass, gravity = 9.81):
    weight = str(mass * gravity)+ ' N' # the value has to be changed to string first
    return weight
print('Weight of an object in Newtons: ', weight_of_object(100)) # 9.81 - average gravity on Earth's surface
print('Weight of an object in Newtons: ', weight_of_object(100, 1.62)) # gravity on the surface of the Moon


### Arbitrary Number of Arguments ; If we do not know the number of arguments we pass to our function, we can create a function which can take arbitrary number of arguments by adding \* before the parameter name.

'''
# Declaring a function
def function_name(*args):
    codes
    codes
# Calling function
function_name(param1, param2, param3,..)
'''

def sum_all_nums(*nums):
    total = 0
    for num in nums:
        total += num     # same as total = total + num 
    return total
print(sum_all_nums(2, 3, 5))


### Default and Arbitrary Number of Parameters in Functions

def generate_groups (team,*args):
    print(team)
    for i in args:
        print(i)
generate_groups('Team-1','Asabeneh','Brook','David','Eyob')

### Function as a Parameter of Another Function

def square_number(n):
    return n * n
def do_something(f, x):
    return f(x)
print(do_something(square_number, 3))



## ðŸ’» Exercises: Day 11

#1. Declare a function _add_two_numbers_. It takes two parameters and it returns a sum.
def adds_two(x, y):
    return x + y

print(adds_two(109, 239))
#2. Area of a circle is calculated as follows: area = Ï€ x r x r. Write a function that calculates _area_of_circle_.
import math

radius = float(input('Enter the radius :'))
pi = math.pi
def area_circle(pi, radius):
    area = pi * radius ** 2
    return area  
print(area_circle(pi, radius))
#3. Write a function called add_all_nums which takes arbitrary number of arguments and sums all the arguments. Check if all the list items are number types. If not do give a reasonable feedback.
def add_all_nums(*nums):
    total = 0
    for num in nums:
        total += num
    return total
print(add_all_nums(12,2344,233,-1999))  
#4. Temperature in Â°C can be converted to Â°F using this formula: Â°F = (Â°C x 9/5) + 32. Write a function which converts Â°C to Â°F, _convert_celcius_to-fahrenheit_.
C = float(input('Enter the Temp in Celcius :'))
def convert_celcius_to_farenheit(tempe):
    F = (C * 9/5) + 32
    return F
print(convert_celcius_to_farenheit(C))
#5. Write a function called check-season, it takes a month parameter and returns the season: Autumn, Winter, Spring or Summer.
month = str(input('Enter your birthday month: '))
def check_season(month):
    if month == 'September' or month == 'October' or month == 'November':
       return 'The season is Autumn'
    elif month == 'December' or month == 'January' or month == 'February':  
       return 'The season is Winter'
    elif month == 'March' or month == 'April' or month == 'May':  
       return 'The season is Spring'
    else:
       return 'The season is Summer'
print(check_season(month))       
#6. Write a function called calculate_slope which return the slope of a linear equation
x = float(input('Enter the value of x:'))
y = float(input('Enter the value of y:'))
c = 0.05
def calculate_slope(x, y):
    m = (y - c)/x
    return m
print(calculate_slope(x, y))
#7. Quadratic equation is calculated as follows: axÂ² + bx + c = 0. Write a function which calculates solution set of a quadratic equation, _solve_quadratic_eqn_.
a = int(input('Enter the value of a:'))
b = int(input('Enter the value of b:'))
c = int(input('Enter the value of c:'))
def solve_quadratic_eqn(a, b, c):
    x = (-b + math.sqrt(b**2 - 4*a*c))/2*a
    return x
print(solve_quadratic_eqn(a,b,c))
#8. Declare a function named print_list. It takes a list as a parameter and it prints out each element of the list.
my_list = [0,2,4,6,8,10]
def print_list(my_list):
    for i in my_list:
        print(i)
print_list(my_list)        
#9. Declare a function named reverse_list. It takes an array as a parameter and it returns the reverse of the array (use loops).
def reverse_list(my_list):
    for i in reversed(my_list):
        print(i)
reverse_list(my_list)        

#10. Declare a function named capitalize_list_items. It takes a list as a parameter and it returns a capitalized list of items
my_list = ['a', 'e', 'i', 'o', 'u']
def capitalize_list_items(my_list):
    lst = [x.upper() for x in my_list]
    print(lst)
capitalize_list_items(my_list)
#11. Declare a function named add_item. It takes a list and an item parameters. It returns a list with the item added at the end.
item = str(input('Enter an item:'))
def add_item(my_list, item):
    my_list.append(item)
    print(my_list)
add_item(my_list, item)  

#12. Declare a function named remove_item. It takes a list and an item parameters. It returns a list with the item removed from it.
item = str(input('Enter an item:'))
def remove_item(my_list, item):
    my_list.remove(item)
    print(my_list)
add_item(my_list, item)

#13.  Declare a function named sum_of_numbers. It takes a number parameter and it adds all the numbers in that range.
def sum_of_numbers(*nums):
    total = 0
    for num in nums:
        total += num
    return total
print(sum_of_numbers(2, 3, 5)) 

'''
num = int(input('Enter a number:'))  
def sum_numbers(num):
    sum = 0
    while num > 0:
        sum += 1
    print(sum)    
print(sum_numbers(num))
'''

#14.  Declare a function named sum_of_odds. It takes a number parameter and it adds all the odd numbers in that range.
def sum_of_odds(num):
    maximum = int(input('Enter the max number :' ))
    sum_odds = 0
    for num in range(1, maximum+1):
        if num % 2 != 0:
            print('{0}'.format(num))
            sum_odds += num
    print('The sum of Odd Numbers from 1 to {0} = {1}'.format(num, sum_odds))
sum_of_odds(5)    
#15.  Declare a function named sum_of_even. It takes a number parameter and it adds all the even numbers in that - range.
def sum_of_even(num):
    maximum = int(input('Enter the max number :' ))
    sum_even = 0
    for num in range(1, maximum+1):
        if num % 2 == 0:
            print('{0}'.format(num))
            sum_even += num
    print('The sum of Even Numbers from 1 to {0} = {1}'.format(num, sum_even))
sum_of_even(8)  
#16.  Declare a function named evens_and_odds . It takes a positive integer as parameter and it counts number of evens and odds in the number.
def evens_and_odds(num):
    maximum = int(input('Enter the max number :' ))
    count_even = 0
    count_odd = 0
    for num in range(1, maximum+1):
        if num % 2 == 0:
            count_even += 1
        else:    
            count_odd += 1
    print('Number of even numbers: ', count_even)
    print('Number of odd numbers: ', count_odd)
evens_and_odds(10)  
#17. Call your function factorial, it takes a whole number as a parameter and it return a factorial of the number
def factorial(num):
    if num <= 1:
        return 1
    else:
        return num * factorial(num-1)
print(factorial(5))
#18. Call your function _is_empty_, it takes a parameter and it checks if it is empty or not
def is_empty(*args):
    if x == None:
        print('It\'s empty!')
    else:
        print(x)
#19. Write different functions which take lists. They should calculate_mean, calculate_median, calculate_mode, calculate_range, calculate_variance, calculate_std (standard deviation).
#### Mean
'''
def calculate_mean(num):
    maximum = int(input('Enter the max number :' ))
    for num in range(1, maximum+1):
        return sum(num)/len(num)  
'''

### Median
def calculate_median(num):
    n = len(num)
    index = n // 2
    if n%2 == 0:
        return sorted(num)[index]
    return sum(sorted(num)[index-1 : index+1]) / 2     

### Mode

from collections import Counter
    
def calculate_mode(num):
    c = Counter(num)
    return [x for x, v in c.items() if v == c.most_common(1)[0][1]]

#20. Write a function called is_prime, which checks if a number is prime.
def prime(num):
    if num > 1:
        s = int(num/2)
        for i in range(2, s+1):
            if num % i == 0:
                return('Not Prime')
                break
        return('Prime!')
print(prime(239))        
#21. Write a functions which checks if all items are unique in the list.
def check_unique(num):
    seen = set()
    return not any(x in seen or seen.add(x) for x in num)
print(check_unique('Rancy Chepchirchir'))
#22. Write a function which checks if all the items of the list are of the same data type.
def check_dtype(lst1):
    lst2 = [x for x in lst1 if type(x) == int]
    if lst1 == lst2:
        return True
    else:
        return False
print(check_dtype([1, 'june', True, 3, 4, 5]))    
#23. Write a function which check if provided variable is a valid python variable

#24. Go to the data folder and access the countries-data.py file.
#- Create a function called the most_spoken_languages in the world. It should return 10 or 20 most spoken languages in the world in descending order
#- Create a function called the most_populated_countries. It should return 10 or 20 most populated countries in descending order.
