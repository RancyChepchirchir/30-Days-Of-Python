#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Mar  7 04:45:54 2021

@author: rancy
"""

### Function as a Parameter
'''
def sum_numbers(nums):  # normal function
    print(sum_numbers(nums))    # a sad function abusing the built-in sum function :<

def higher_order(f, *args):  # function as a parameter
    summation = f(*args)
    return summation
result = higher_order(sum_numbers, [1, 2, 3, 4, 5])
print(result)       # 15
'''

### Function as a Return Value

def square(x):          # a square function
    return x ** 2

def cube(x):            # a cube function
    return x ** 3

def absolute(x):        # an absolute value function
    if x >= 0:
        return x
    else:
        return -(x)

def higher_order_function(type): # a higher order function returning a function
    if type == 'square':
        return square
    elif type == 'cube':
        return cube
    elif type == 'absolute':
        return absolute

result = higher_order_function('square')
print(result(3))       # 9
result = higher_order_function('cube')
print(result(3))       # 27
result = higher_order_function('absolute')
print(result(-3))      # 3


#You can see from the above example that the higher order function is returning different functions depending on the passed parameter

## Python Closures

#Python allows a nested function to access the outer scope of the enclosing function. This is is known as a Closure. Let‚Äôs have a look at how closures work in Python. In Python, closure is created by nesting a function inside another encapsulating function and then returning the inner function. See the example below.

def add_ten():
    ten = 10
    
    def add(num):
        return num + ten
    return add

closure_result = add_ten()
print(closure_result(5))  # 15
print(closure_result(10))  # 20


## Python Decorators
# A decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are usually called before the definition of a function you want to decorate.

### Creating Decorators
# To create a decorator function, we need an outer function with an inner wrapper function.

# Normal function
def greeting():
    return 'Welcome to Python'
def uppercase_decorator(function):
    def wrapper():
        func = function()
        make_uppercase = func.upper()
        return make_uppercase
    return wrapper
g = uppercase_decorator(greeting)
print(g())          # WELCOME TO PYTHON

## Lets implement the example above with a decorator

'''This decorator function is a higher order function
that takes a function as a parameter'''
def uppercase_decorator(function):
    def wrapper():
        func = function()
        make_uppercase = func.upper()
        return make_uppercase
    return wrapper
@uppercase_decorator
def greeting():
    return 'Welcome to Python'
print(greeting())   # WELCOME TO PYTHON


### Applying Multiple Decorators to a Single Function

'''These decorator functions are higher order functions
that take functions as parameters'''

# First Decorator
def uppercase_decorator(function):
    def wrapper():
        func = function()
        make_uppercase = func.upper()
        return make_uppercase
    return wrapper
# Second decorator
def split_string_decorator(function):
    def wrapper():
        func = function()
        splitted_string = func.split()
        return splitted_string

    return wrapper

@split_string_decorator
@uppercase_decorator     # order with decorators is important in this case - .upper() function does not work with lists

def greeting():
    return 'Welcome to Python'
print(greeting())   # WELCOME TO PYTHON


### Accepting Parameters in Decorator Functions

# Most of the time we need our functions to take parameters, so we might need to define a decorator that accepts parameters.

def decorator_with_parameters(function):
    def wrapper_accepting_parameters(para1, para2, para3):
        function(para1, para2, para3)
        print("I live in {}".format(para3))
    return wrapper_accepting_parameters

@decorator_with_parameters
def print_full_name(first_name, last_name, country):
    print("I am {} {}. I love to study.".format(
        first_name, last_name, country))

print_full_name("Rancy", "Chepchirchir",'Kenya')


## Built-in Higher Order Functions

#Some of the built-in higher order functions that we cover in this part are _map()_, _filter_, and _reduce_.
#Lambda function can be passed as a parameter and the best use case of lambda functions is in functions like map, filter and reduce.

### Python - Map Function
#The map() function is a built-in function that takes a function and iterable as parameters.

'''
    # syntax
    map(function, iterable)
'''

# Add two lists using map and lambda 
numbers1 = [1, 2, 3] 
numbers2 = [4, 5, 6] 
result = map(lambda x, y: x + y, numbers1, numbers2) 
print(list(result))  

# Return double of n 
def addition(n): 
    return n + n 
# We double all numbers using map() 
numbers = (1, 2, 3, 4) 
result = map(addition, numbers) 
print(list(result)) 

print(list)
print(tuple)

numbers_str = ['1', '2', '3', '4', '5']  # iterable
numbers_int = map(int, numbers_str)
print(list(numbers_int))    # [1, 2, 3, 4, 5]


names = ['Rancy', 'Lidiya', 'Ermias', 'Abraham']  # iterable

def change_to_upper(name):
    return name.upper()

names_upper_cased = map(change_to_upper, names)
print(list(names_upper_cased))    # ['ASABENEH', 'LIDIYA', 'ERMIAS', 'ABRAHAM']

# Lets apply it with a lambda function
names_upper_cased = map(lambda name: name.upper(), names)
print(list(names_upper_cased))    # ['ASABENEH', 'LIDIYA', 'ERMIAS', 'ABRAHAM']

#What actually map does is iterating over a list. For instance, it changes the names to upper case and returns a new list.
### Python - Filter Function
#The filter() function calls the specified function which returns boolean for each item of the specified iterable (list). It filters the items that satisfy the filtering criteria.

'''
# syntax
filter(function, iterable)
'''    

# Lets filter only even nubers
numbers = [1, 2, 3, 4, 5]  # iterable

def is_even(num):
    if num % 2 == 0:
        return True
    return False

even_numbers = filter(is_even, numbers)
print(list(even_numbers))       # [2, 4]

numbers = [1, 2, 3, 4, 5]  # iterable

def is_odd(num):
    if num % 2 != 0:
        return True
    return False

odd_numbers = filter(is_odd, numbers)
print(list(odd_numbers))       # [1, 3, 5]


# Filter long name
names = ['Chepchirchir', 'Lidiya', 'Ermias', 'Abraham']  # iterable
def is_name_long(name):
    if len(name) > 7:
        return True
    return False

long_names = filter(is_name_long, names)
print(list(long_names))         # ['Chepchirchir']


### Python - Reduce Function ; The _reduce()_ function is defined in the functools module and we should import it from this module. Like map and filter it takes two parameters, a function and an iterable. However, it doesn't return another iterable, instead it returns a single value.
from functools import reduce

numbers_str = ['1', '2', '3', '4', '5']  # iterable
def add_two_nums(x, y):
    return int(x) + int(y)

total = reduce(add_two_nums, numbers_str)
print(total)    # 15

# Without using lambdas
def starts_with_A(s):
    return s[0] == "A"

fruit = ["Apple", "Banana", "Pear", "Apricot", "Orange"]
map_object = map(starts_with_A, fruit)
print(list(map_object))

map_object1 = map(lambda s: s[0] == "A", fruit)
print(list(map_object1))

filter_object = filter(starts_with_A, fruit)
print(list(filter_object))

filter_object1 = filter(lambda s: s[0] == "A", fruit)
print(list(filter_object1))

my_list = [2, 4, 7, 3]
print(reduce(lambda x, y: x + y, my_list))
print("With an initial value: " + str(reduce(lambda x, y: x + y, my_list, 10)))

## üíª Exercises: Day 14
countries = ['Estonia', 'Finland', 'Sweden', 'Denmark', 'Norway', 'Iceland']
names = ['Asabeneh', 'Lidiya', 'Ermias', 'Abraham']
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

#1. Explain the difference between map, filter, and reduce.
'''
map creates a new array by transforming every element in an array, individually. 
filter creates a new array by removing elements that don't belong. reduce , 
on the other hand, takes all of the elements in an array and reduces them into a single value.
'''

#2. Explain the difference between higher order function, closure and decorator
'''
a higher-order function is simply a function that takes one or more functions 
as arguments and/or produces a function as a result

A closure is a way of keeping alive a variable even when the function has returned. 
So, in a closure, a function is defined along with the environment. In Python, 
this is done by nesting a function inside the encapsulating function and then 
returning the underlying function.

Python decorators are convenient ways to make changes to the functionality of code 
without making changes to the code. A decorator is written as a function closure 
and implemented by giving the ‚Äú@‚Äù operator on top of the function.
'''
#3. Define a call function before map, filter or reduce, see examples.


#4. Use for loop to print each country in the countries list.


#5. Use for to print each name in the names list.


#6. Use for to print each number in the numbers list.


#7. Use map to create a new list by changing each country to uppercase in the countries list


#8. Use map to create a new list by changing each number to its square in the numbers list
numbers = [1,2,3,4,5,6,7,8,9]
squares = [i*i for i in numbers]
print(squares)

def my_square(x):
    return x*x
squares1 = map(my_square, numbers)
print(list(squares1))

squares2 = map(lambda x : x*x, numbers)
print(list(squares2))
#9. Use map to change each name to uppercase in the names list
countries = ['Kenya', 'Uganda', 'Rwanda', 'Tanzania', 'Sudan']
upper2 = map(lambda x : x.upper(), countries)
print(list(upper2))
#10. Use filter to filter out countries containing 'land'.
filter_countries = filter(lambda x: x[0] != "K", countries)
print(list(filter_countries))
#11. Use filter to filter out countries having exactly six characters.
filter_countries1 = filter(lambda x: len(x) == 6, countries)
print(list(filter_countries1))
#12. Use filter to filter out countries containing six letters and more in the country list.
filter_countries2 = filter(lambda x: len(x) >= 6, countries)
print(list(filter_countries2))
#13. Use filter to filter out countries starting with an 'E'
filter_countries3 = filter(lambda x: x[0] == "R", countries)
print(list(filter_countries3))
#14. Chain two or more list iterators (eg. arr.map(callback).filter(callback).reduce(callback))
from itertools import chain

a = (x for x in ['1', '2', '3', '4'])
b = (x for x in ['x', 'y', 'z'])
print(' '.join(chain(a, b)))   # ' '.join(chain.from_iterable([a,b])
#15. Declare a function called get_string_lists which takes a list as a parameter and then returns a list containing only string items.
#16. Use reduce to sum all the numbers in the numbers list.
num_list = [1,2,3,4,5]
sum_list = reduce(lambda x,y: x + y, num_list)
print(sum_list) #15
#17. Use reduce to concatenate all the countries and to produce this sentence: Estonia, Finland, Sweden, Denmark, Norway, and Iceland are north European countries

#18. Declare a function called categorize_countries that returns a list of countries with some common pattern (you can find the [countries list](https://github.com/Asabeneh/30-Days-Of-Python/blob/master/data/countries.py) in this repository as countries.js(eg 'land', 'ia', 'island', 'stan')).

#19. Create a function returning a dictionary, where keys stand for starting letters of countries and values are the number of country names starting with that letter.

#20. Declare a get_first_ten_countries function - it returns a list of first ten countries from the countries.js list in the data folder.

#21. Declare a get_last_ten_countries function that returns the last ten countries in the countries list.

#23. Use the countries_data.py (https://github.com/Asabeneh/30-Days-Of-Python/blob/master/data/countries-data.py) file and follow the tasks below:
 #  - Sort countries by name, by capital, by population
 #  - Sort out the ten most spoken languages by location.
 #  - Sort out the ten most populated countries.



    