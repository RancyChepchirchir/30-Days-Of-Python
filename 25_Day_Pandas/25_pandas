#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar  8 00:37:32 2021

@author: rancy
"""

# =============================================================================
# ## Pandas
# =============================================================================

'''
Pandas is an open source, high-performance, easy-to-use data structures and data analysis tools for the Python programming language.
Pandas adds data structures and tools designed to work with table-like data which is Series and Data Frames.
Pandas provides tools for data manipulation: reshaping, merging, sorting, slicing, aggregation and imputation.
Pandas data structure is based on *Series* and *DataFrames*
A series is a column and a DataFrame is a multidimensional table made up of collection of series. In 
order to create a pandas series we should use numpy to create a one dimensional arrays or a python list.
'''

# pandas series is just one column of data. If we want to have multiple columns we use data frames. The example below shows pandas DataFrames.

# Data frame is a collection of rows and columns. Look at the table below; it has many more columns than the example above:

## Importing Pandas

import pandas as pd # importing pandas as pd
import numpy  as np # importing numpy as np

### Creating Pandas Series with Default Index

nums = [1, 2, 3, 4,5]
s = pd.Series(nums)
print(s)

### Creating  Pandas Series with custom index

nums = [1, 2, 3, 4, 5]
s = pd.Series(nums, index=[1, 2, 3, 4, 5])
print(s)

fruits = ['Orange','Banana','Mangao']
fruits = pd.Series(fruits, index=[1, 2, 3])
print(fruits)

### Creating Pandas Series from a Dictionary

dct = {'name':'Asabeneh','country':'Finland','city':'Helsinki'}
s = pd.Series(dct)
print(s)

### Creating a Constant Pandas Series

s = pd.Series(10, index = [1, 2,3])
print(s)

### Creating a  Pandas Series Using Linspace

s = pd.Series(np.linspace(5, 20, 10)) # linspace(starting, end, items)
print(s)

## DataFrames
#Pandas data frames can be created in different ways.
### Creating DataFrames from List of Lists

data = [
    ['Asabeneh', 'Finland', 'Helsink'], 
    ['David', 'UK', 'London'],
    ['John', 'Sweden', 'Stockholm']
]
df = pd.DataFrame(data, columns=['Names','Country','City'])
print(df)

### Creating DataFrame Using Dictionary

data = {'Name': ['Asabeneh', 'David', 'John'], 'Country':[
    'Finland', 'UK', 'Sweden'], 'City': ['Helsiki', 'London', 'Stockholm']}
df = pd.DataFrame(data)
print(df)


### Creating DataFrames from a List of Dictionaries

data = [
    {'Name': 'Asabeneh', 'Country': 'Finland', 'City': 'Helsinki'},
    {'Name': 'David', 'Country': 'UK', 'City': 'London'},
    {'Name': 'John', 'Country': 'Sweden', 'City': 'Stockholm'}]
df = pd.DataFrame(data)
print(df)

## Reading CSV File Using Pandas
# To download the csv file, needed in this example, console/command line is enough:

curl -O https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/data/weight-height.csv
df = pd.read_csv('weight-height.csv')
print(df)

### Data Exploration
#Let's read only the first 5 rows using head()

print(df.head()) # give five rows we can increase the number of rows by passing argument to the head() method

#As you can see the csv file has three rows: Gender, Height and Weight. But we don't know the number of rows. Let's use shape meathod.

print(df.shape) # as you can see 10000 rows and three columns

#Let's get all the columns using columns.

print(df.columns)

#Let's read only the last 5 rows using tail()

print(df.tail()) # tails give the last five rows, we can increase the rows by passing argument to tail method

#Now, lets get a specific column using the column key

heights = df['Height'] # this is now a series

print(heights)

weights = df['Weight'] # this is now a series

print(weights)

print(len(heights) == len(weights))

print(heights.describe()) # give statisical information about height data

print(weights.describe())

print(df.describe())  # describe can also give statistical information from a dataFrame

## Modifying a DataFrame
'''
Modifying a DataFrame:
    * We can create a new DataFrame
    * We can create a new column and add it to the DataFrame, 
    * we can remove an existing column from a DataFrame, 
    * we can modify an existing column in a DataFrame, 
    * we can change the data type of column values in the DataFrame
'''

### Creating a DataFrame
# As always, first we import the necessary packages. Now, lets import pandas and numpy, two best friends ever.

data = [
    {"Name": "Asabeneh", "Country":"Finland","City":"Helsinki"},
    {"Name": "David", "Country":"UK","City":"London"},
    {"Name": "John", "Country":"Sweden","City":"Stockholm"}]
df = pd.DataFrame(data)
print(df)

#Adding a column to a DataFrame is like adding a key to a dictionary.
#First let's use the previous example to create a DataFrame. After we create the DataFrame, we will start modifying the columns and column values.

### Adding a New Column
#Let's add a weight column in the DataFrame

weights = [74, 78, 69]
df['Weight'] = weights
df

#Let's add a height column into the DataFrame aswell

heights = [173, 175, 169]
df['Height'] = heights
print(df)

#As you can see in the DataFrame above, we did add new columns, Weight and Height. Let's add one additional column called BMI(Body Mass Index) by calculating their BMI using thier mass and height. BMI is mass divided by height squared (in meters) - Weight/Height * Height.
#As you can see, the height is in centimeters, so we shoud change it to meters. Let's modify the height row.

### Modifying column values

df['Height'] = df['Height'] * 0.01
df

# Using functions makes our code clean, but you can calculate the bmi without one
def calculate_bmi ():
    weights = df['Weight']
    heights = df['Height']
    bmi = []
    for w,h in zip(weights, heights):
        b = w/(h*h)
        bmi.append(b)
    return bmi
    
bmi = calculate_bmi()

df['BMI'] = bmi
df

### Formating DataFrame columns
#The BMI column values of the DataFrame are float with many significant digits after decimal. Let's change it to one significant digit after point.

df['BMI'] = round(df['BMI'], 1)
print(df)

#The information in the DataFrame seems not yet complete, let's add birth year and current year columns.

birth_year = ['1769', '1985', '1990']
current_year = pd.Series(2020, index=[0, 1,2])
df['Birth Year'] = birth_year
df['Current Year'] = current_year
df

## Checking data types of Column values

print(df.Weight.dtype)

df['Birth Year'].dtype # it gives string object , we should change this to number
df['Birth Year'] = df['Birth Year'].astype('int')
print(df['Birth Year'].dtype) # let's check the data type now

#Now same for the current year:

df['Current Year'] = df['Current Year'].astype('int')
df['Current Year'].dtype

# Now, the column values of birth year and current year are integers. We can calculate the age.

ages = df['Current Year'] - df['Birth Year']
ages

df['Ages'] = ages
print(df)

mean = (35 + 30)/ 2
print('Mean: ', mean)	#it is good to add some description to the output, so we know what is what

### Boolean Indexing

print(df[df['Ages'] > 120])

print(df[df['Ages'] < 120])




## Exercises: Day 25

#1. Read the hacker_news.csv file from data directory 

#2. Get the first five rows

#3. Get the last five rows

#4. Get the title column as pandas series

#5. Count the number of rows and columns

#    - Filter the titles which contain python
#    - Filter the titles which contain JavaScript
#    - Explore the data and make sense of it